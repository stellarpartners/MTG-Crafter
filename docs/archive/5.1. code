from dataclasses import dataclass
from typing import Dict, List, Set
from collections import defaultdict
import random

@dataclass
class GameState:
    """Tracks the current game state during simulation"""
    hand: List[str]
    lands_in_play: List[str]
    mana_rocks_in_play: List[str]
    cards_in_play: Set[str]
    mana_available: Dict[str, int]
    lands_in_hand: List[str]

class CastingAnalyzer:
    """Analyzes casting probabilities through game simulation"""
    
    def __init__(self, decklist: Dict[str, int], card_db):
        self.decklist = decklist
        self.card_db = card_db
    
    def analyze_casting_sequence(self, num_simulations: int = 1000) -> Dict:
        """
        Simulate gameplay sequences to determine when cards can be cast
        
        Args:
            num_simulations: Number of games to simulate
            
        Returns:
            Dictionary containing:
            - card_statistics: Detailed stats for each card
            - earliest_cast: Earliest possible casting turn
            - cast_by_turn: Percentage of deck castable by turn
            - problematic_cards: Cards never cast
            - sample_games: Detailed logs of 3 sample games
        """
        # Track sample games
        sample_indices = [0, num_simulations//2, num_simulations-1]
        
        # Setup tracking
        cast_turns = defaultdict(list)  # Card -> List of turns cast
        card_draws = defaultdict(list)  # Card -> List of turns drawn
        sample_games = []
        
        # Run simulations
        for sim in range(num_simulations):
            game_log = []
            if sim in sample_indices:
                game_log.append(f"Game {sim+1}:")
            
            # Initialize game
            game_state = self._setup_game()
            if sim in sample_indices:
                game_log.append(f"\nOpening Hand:")
                game_log.append(", ".join(game_state.hand))
            
            # Track initial draws
            self._track_initial_draws(game_state.hand, card_draws)
            
            # Simulate turns
            game_log = self._simulate_turns(game_state, cast_turns, card_draws, 
                                          sim in sample_indices, game_log)
            
            if sim in sample_indices:
                sample_games.append("\n".join(game_log))
        
        return self._process_results(cast_turns, card_draws, sample_games)
    
    def _setup_game(self) -> GameState:
        """Initialize a new game state"""
        # Create and shuffle deck
        deck = []
        for card, quantity in self.decklist.items():
            deck.extend([card] * quantity)
        random.shuffle(deck)
        
        # Draw opening hand
        hand = deck[:7]
        
        # Initialize game state
        return GameState(
            hand=hand,
            lands_in_play=[],
            mana_rocks_in_play=[],
            cards_in_play=set(),
            mana_available=defaultdict(int),
            lands_in_hand=[card for card in hand 
                          if self._get_card_info(card).get('is_land', False)]
        )
    
    def _simulate_turns(self, state: GameState, cast_turns: Dict, 
                       card_draws: Dict, log_game: bool, game_log: List) -> List:
        """Simulate 10 turns of gameplay"""
        deck = self._create_library()
        
        for turn in range(1, 11):
            if log_game:
                self._log_turn_start(state, turn, game_log)
            
            # Draw step
            if deck:
                drawn_card = self._handle_draw(deck, state, turn, 
                                             card_draws, log_game, game_log)
            
            # Reset mana pool
            state.mana_available.clear()
            self._add_mana_from_sources(state)
            
            # Land play phase
            self._handle_land_play(state, log_game, game_log)
            
            # Casting phase
            self._handle_casting(state, turn, cast_turns, log_game, game_log)
            
            if log_game:
                game_log.append(f"Available mana: {dict(state.mana_available)}")
                game_log.append("-" * 40)
        
        return game_log
    
    # ... (additional helper methods)
